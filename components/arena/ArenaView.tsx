'use client'

import { useEffect, useState, useRef } from 'react'
import { Dialectic, Fighter, Synthesis } from '@/types/database'
import { Card, CardContent } from '@/components/ui/Card'
import { useRouter } from 'next/navigation'
import Image from 'next/image'
import { getFighterImageUrl } from '@/lib/fighter-images'

// Utility function to generate markdown content
function generateMarkdownContent(
  dialectic: Dialectic & { fighter1: Fighter; fighter2: Fighter },
  rounds: { fighter1Text: string; fighter2Text: string }[],
  currentRound: number,
  currentFighter1Text: string,
  currentFighter2Text: string,
  syntheses: Synthesis[]
): string {
  const date = new Date().toLocaleDateString()

  let markdown = `# Dialectical Exchange: ${dialectic.fighter1.name} vs ${dialectic.fighter2.name}

**Date**: ${date}
**Thesis**: "${dialectic.thesis}"
**Rounds**: ${dialectic.round_count}

## Participants

**${dialectic.fighter1.name}** (*${dialectic.fighter1.fighter_name}*)
${dialectic.fighter1.era} | ${dialectic.fighter1.tradition.join(', ')}

**${dialectic.fighter2.name}** (*${dialectic.fighter2.fighter_name}*)
${dialectic.fighter2.era} | ${dialectic.fighter2.tradition.join(', ')}

---

## Dialectical Exchange

`

  // Add completed rounds
  rounds.forEach((round, index) => {
    markdown += `### Round ${index + 1}\n\n`

    if (round.fighter1Text) {
      markdown += `**${dialectic.fighter1.name}:**\n\n${round.fighter1Text}\n\n`
    }

    if (round.fighter2Text) {
      markdown += `**${dialectic.fighter2.name}:**\n\n${round.fighter2Text}\n\n`
    }

    markdown += `---\n\n`
  })

  // Add current round if in progress
  if (currentRound > rounds.length && (currentFighter1Text || currentFighter2Text)) {
    markdown += `### Round ${currentRound} (In Progress)\n\n`

    if (currentFighter1Text) {
      markdown += `**${dialectic.fighter1.name}:**\n\n${currentFighter1Text}\n\n`
    }

    if (currentFighter2Text) {
      markdown += `**${dialectic.fighter2.name}:**\n\n${currentFighter2Text}\n\n`
    }

    markdown += `---\n\n`
  }

  // Add syntheses
  if (syntheses.length > 0) {
    markdown += `## Syntheses\n\n`

    syntheses.forEach((synthesis, index) => {
      const emoji = synthesis.type === 'resolution' ? '‚úÖ' :
                   synthesis.type === 'transcendence' ? 'üöÄ' :
                   synthesis.type === 'paradox' ? 'üåÄ' : 'üîÑ'

      markdown += `### ${emoji} ${synthesis.title}\n\n`
      markdown += `**Type**: ${synthesis.type.charAt(0).toUpperCase() + synthesis.type.slice(1)}\n\n`
      markdown += `${synthesis.content}\n\n`

      if (synthesis.concept_tags && synthesis.concept_tags.length > 0) {
        markdown += `**Concepts**: ${synthesis.concept_tags.map(tag => `#${tag}`).join(', ')}\n\n`
      }

      markdown += `---\n\n`
    })
  }

  markdown += `---

*Generated by [Dialectical.Claims](https://dialectical.claims)*`

  return markdown
}

// Function to download markdown file
function downloadMarkdown(content: string, filename: string) {
  const blob = new Blob([content], { type: 'text/markdown' })
  const url = URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

interface ArenaViewProps {
  dialectic: Dialectic & {
    fighter1: Fighter
    fighter2: Fighter
  }
}

interface RoundData {
  fighter1Text: string
  fighter2Text: string
}

export function ArenaView({ dialectic }: ArenaViewProps) {
  const router = useRouter()
  const [currentRound, setCurrentRound] = useState(0)
  const [rounds, setRounds] = useState<RoundData[]>([])
  const [currentFighter1Text, setCurrentFighter1Text] = useState('')
  const [currentFighter2Text, setCurrentFighter2Text] = useState('')
  const [syntheses, setSyntheses] = useState<Synthesis[]>([])
  const [status, setStatus] = useState<'streaming' | 'complete' | 'error'>('streaming')
  const [streamingFighter, setStreamingFighter] = useState<1 | 2 | null>(null)
  const [errorMessage, setErrorMessage] = useState<string>('')
  const bottomRef = useRef<HTMLDivElement>(null)
  
  // Refs to track current text (avoids closure issues)
  const fighter1TextRef = useRef('')
  const fighter2TextRef = useRef('')

  // Auto-scroll to bottom when new content arrives
  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [currentFighter1Text, currentFighter2Text, rounds, syntheses])

  useEffect(() => {
    const eventSource = new EventSource(`/api/dialectics/${dialectic.id}/stream`)

      eventSource.addEventListener('status', (e) => {
        const data = JSON.parse(e.data)
        // Status update received
      })

    eventSource.addEventListener('round-start', (e) => {
      const data = JSON.parse(e.data)
      setCurrentRound(data.roundNumber)
      // Reset refs and state
      fighter1TextRef.current = ''
      fighter2TextRef.current = ''
      setCurrentFighter1Text('')
      setCurrentFighter2Text('')
      setStreamingFighter(1)
    })

    eventSource.addEventListener('fighter1-chunk', (e) => {
      const data = JSON.parse(e.data)
      fighter1TextRef.current += data.chunk
      setCurrentFighter1Text((prev) => prev + data.chunk)
    })

    eventSource.addEventListener('fighter2-chunk', (e) => {
      const data = JSON.parse(e.data)
      fighter2TextRef.current += data.chunk
      setCurrentFighter2Text((prev) => prev + data.chunk)
      setStreamingFighter(2)
    })

    eventSource.addEventListener('round-complete', (e) => {
      const data = JSON.parse(e.data)
      // Use refs to get the current text values (avoids stale closure)
      const newRound = {
        fighter1Text: fighter1TextRef.current,
        fighter2Text: fighter2TextRef.current,
      }
      setRounds((prev) => [...prev, newRound])
      setStreamingFighter(null)
    })

      eventSource.addEventListener('synthesis-start', () => {
        // Generating syntheses
      })

    eventSource.addEventListener('synthesis-complete', (e) => {
      const data = JSON.parse(e.data)
      setSyntheses(data.syntheses)
    })

    eventSource.addEventListener('complete', () => {
      setStatus('complete')
      eventSource.close()
    })

    eventSource.addEventListener('error', (e: any) => {
      // SSE error occurred
      // Try to extract error message if it's in the data
      let message = 'An error occurred while generating the dialectic.'
      if (e.data) {
        try {
          const errorData = JSON.parse(e.data)
          if (errorData.error) {
            // Check for rate limit errors
            if (errorData.error.includes('429') || errorData.error.includes('quota')) {
              message = '‚ö†Ô∏è Gemini API rate limit reached. Free tier allows 50 requests/day. Please try again later or upgrade your API key.'
            } else if (errorData.error.includes('SAFETY')) {
              message = '‚ö†Ô∏è Content was blocked by safety filters. Try a different thesis or fighters.'
            } else {
              message = errorData.error
            }
          }
        } catch (parseError) {
          // Use default message
        }
      }
      
      setErrorMessage(message)
      setStatus('error')
      eventSource.close()
    })

    return () => {
      eventSource.close()
    }
  }, [dialectic.id])

  // Handle export to markdown
  const handleExportMarkdown = () => {
    const content = generateMarkdownContent(
      dialectic,
      rounds,
      currentRound,
      currentFighter1Text,
      currentFighter2Text,
      syntheses
    )

    const fighter1LastName = dialectic.fighter1.name.split(' ').pop()
    const fighter2LastName = dialectic.fighter2.name.split(' ').pop()
    const filename = `dialectical-exchange-${fighter1LastName}-vs-${fighter2LastName}-${new Date().toISOString().split('T')[0]}.md`

    downloadMarkdown(content, filename)
  }

  return (
    <div className="max-w-6xl mx-auto p-4 md:p-8 space-y-8">
      {/* Navigation and Export */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-4">
        <button
          onClick={() => router.push('/')}
          className="btn btn-ghost text-sm px-4 py-2 flex items-center gap-2 hover:text-primary transition-colors"
        >
          <span>‚Üê</span>
          <span>Back to Home</span>
        </button>

        <button
          onClick={handleExportMarkdown}
          className="btn btn-outline text-sm px-4 py-2 flex items-center gap-2 hover:bg-primary/10 transition-colors"
          disabled={rounds.length === 0 && !currentFighter1Text && !currentFighter2Text}
        >
          <span>üìÑ</span>
          <span>Export to Markdown</span>
        </button>
      </div>

      {/* Header - Street Fighter Style HUD */}
      <div className="space-y-6 mb-8">
        {/* Fighter Name Plates */}
        <div className="flex flex-col lg:flex-row items-center justify-between gap-4">
          {/* Fighter 1 */}
          <div className="w-full lg:flex-1 lg:max-w-md order-1 lg:order-1">
            <div className="bg-gradient-to-r from-blue-500/20 to-transparent border-2 border-blue-500/50 rounded-lg p-4 relative overflow-hidden">
              <div className="absolute inset-0 bg-blue-500/10 animate-pulse" />
              <div className="relative z-10 flex items-center gap-4">
                {/* Fighter 1 Image */}
                <div className="w-12 h-12 sm:w-16 sm:h-16 md:w-20 md:h-20 rounded-full overflow-hidden border-2 border-blue-400 flex-shrink-0 bg-muted">
                  {getFighterImageUrl(dialectic.fighter1.name) ? (
                    <Image
                      src={getFighterImageUrl(dialectic.fighter1.name)!}
                      alt={dialectic.fighter1.name}
                      width={80}
                      height={80}
                      className="object-cover w-full h-full"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-2xl font-bold text-muted-foreground">
                      {dialectic.fighter1.name.charAt(0)}
                    </div>
                  )}
                </div>
                <div>
                  <h2 className="text-sm sm:text-lg md:text-xl lg:text-2xl font-bold text-blue-400 mb-1" style={{fontFamily: 'Orbitron, sans-serif'}}>
                    {dialectic.fighter1.name.toUpperCase()}
                  </h2>
                  <p className="text-xs text-blue-300/70">{dialectic.fighter1.fighter_name}</p>
                </div>
              </div>
              <div className="absolute -right-4 -bottom-4 text-6xl opacity-10">ü•ä</div>
            </div>
          </div>

          {/* VS Badge */}
          <div className="flex-shrink-0 order-2 lg:order-2 my-4 lg:my-0">
            <div className="vs-badge px-4 py-2 bg-card border-4 border-primary rounded-lg text-xl lg:text-4xl">
              VS
            </div>
          </div>

          {/* Fighter 2 */}
          <div className="w-full lg:flex-1 lg:max-w-md order-3 lg:order-3">
            <div className="bg-gradient-to-l from-red-500/20 to-transparent border-2 border-red-500/50 rounded-lg p-4 relative overflow-hidden">
              <div className="absolute inset-0 bg-red-500/10 animate-pulse" />
              <div className="relative z-10 flex items-center gap-4 justify-end">
                <div className="text-right">
                  <h2 className="text-sm sm:text-lg md:text-xl lg:text-2xl font-bold text-red-400 mb-1" style={{fontFamily: 'Orbitron, sans-serif'}}>
                    {dialectic.fighter2.name.toUpperCase()}
                  </h2>
                  <p className="text-xs text-red-300/70">{dialectic.fighter2.fighter_name}</p>
                </div>
                {/* Fighter 2 Image */}
                <div className="w-12 h-12 sm:w-16 sm:h-16 md:w-20 md:h-20 rounded-full overflow-hidden border-2 border-red-400 flex-shrink-0 bg-muted">
                  {getFighterImageUrl(dialectic.fighter2.name) ? (
                    <Image
                      src={getFighterImageUrl(dialectic.fighter2.name)!}
                      alt={dialectic.fighter2.name}
                      width={80}
                      height={80}
                      className="object-cover w-full h-full"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-2xl font-bold text-muted-foreground">
                      {dialectic.fighter2.name.charAt(0)}
                    </div>
                  )}
                </div>
              </div>
              <div className="absolute -left-4 -bottom-4 text-6xl opacity-10">ü•ä</div>
            </div>
          </div>
        </div>

        {/* Thesis Display */}
        <div className="relative">
          <div className="absolute inset-0 bg-gradient-to-r from-primary/20 via-accent/20 to-secondary/20 blur-xl" />
          <Card className="relative p-4 sm:p-6 bg-card/90 border-2 border-primary/30">
            <div className="text-center">
              <div className="text-xs text-primary/60 mb-2" style={{fontFamily: '"Press Start 2P", cursive', letterSpacing: '0.1em'}}>
                üí≠ THESIS üí≠
              </div>
              <p className="text-sm sm:text-base md:text-lg italic philosophical-text text-foreground/90">
                &ldquo;{dialectic.thesis}&rdquo;
              </p>
            </div>
          </Card>
        </div>

        {/* Round Indicator - Street Fighter Style */}
        <div className="round-indicator">
          <div className="inline-block px-4 sm:px-6 py-2 sm:py-3 border-2 sm:border-4 border-primary bg-card rounded-lg relative overflow-hidden">
            <div className="absolute inset-0 bg-primary/10 animate-pulse" />
            <span className="relative z-10 text-xs sm:text-sm">
              ROUND {currentRound} / {dialectic.round_count}
            </span>
          </div>
        </div>
      </div>

      {/* All Rounds - Chat-like Display */}
      <div className="space-y-6">
        {/* Completed Rounds */}
        {rounds.map((round, index) => (
          <div key={`round-${index}`} className="space-y-4">
            <div className="round-indicator text-center py-3">
              <span className="text-xs">‚îÅ‚îÅ‚îÅ ROUND {index + 1} ‚îÅ‚îÅ‚îÅ</span>
            </div>

            {round.fighter1Text && (
              <div className="relative group">
                <div className="absolute inset-0 bg-blue-500/20 blur-xl opacity-0 group-hover:opacity-100 transition-opacity" />
                <Card className="relative p-4 md:p-6 bg-gradient-to-br from-blue-950/40 to-card border-2 border-blue-500/30 hover:border-blue-500/60 transition-all">
                  <div className="flex items-center gap-2 mb-3">
                    <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
                    <h3 className="font-bold text-blue-400" style={{fontFamily: 'Orbitron, sans-serif', letterSpacing: '0.05em'}}>
                      {dialectic.fighter1.name.toUpperCase()}
                    </h3>
                  </div>
                  <div className="philosophical-text whitespace-pre-wrap text-foreground/90 leading-relaxed">
                    {round.fighter1Text}
                  </div>
                </Card>
              </div>
            )}

            {round.fighter2Text && (
              <div className="relative group">
                <div className="absolute inset-0 bg-red-500/20 blur-xl opacity-0 group-hover:opacity-100 transition-opacity" />
                <Card className="relative p-4 md:p-6 bg-gradient-to-br from-red-950/40 to-card border-2 border-red-500/30 hover:border-red-500/60 transition-all">
                  <div className="flex items-center gap-2 mb-3">
                    <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse" />
                    <h3 className="font-bold text-red-400" style={{fontFamily: 'Orbitron, sans-serif', letterSpacing: '0.05em'}}>
                      {dialectic.fighter2.name.toUpperCase()}
                    </h3>
                  </div>
                  <div className="philosophical-text whitespace-pre-wrap text-foreground/90 leading-relaxed">
                    {round.fighter2Text}
                  </div>
                </Card>
              </div>
            )}
          </div>
        ))}

        {/* Current Round (Streaming) */}
        {currentRound > rounds.length && (
          <div className="space-y-4">
            <div className="round-indicator text-center py-3 animate-pulse">
              <span className="text-xs">‚îÅ‚îÅ‚îÅ ROUND {currentRound} ‚îÅ‚îÅ‚îÅ</span>
            </div>

            {currentFighter1Text && (
              <div className="relative">
                <div className="absolute inset-0 bg-blue-500/30 blur-xl animate-pulse" />
                <Card className="relative p-4 md:p-6 bg-gradient-to-br from-blue-950/40 to-card border-2 border-blue-500/60 animate-border-pulse">
                  <div className="flex items-center gap-2 mb-3">
                    <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
                    <h3 className="font-bold text-blue-400" style={{fontFamily: 'Orbitron, sans-serif', letterSpacing: '0.05em'}}>
                      {dialectic.fighter1.name.toUpperCase()}
                    </h3>
                    {streamingFighter === 1 && (
                      <span className="text-xs text-blue-400 ml-2" style={{fontFamily: '"Press Start 2P", cursive'}}>
                        ‚ö° LIVE
                      </span>
                    )}
                  </div>
                  <div className="philosophical-text whitespace-pre-wrap text-foreground/90 leading-relaxed">
                    {currentFighter1Text}
                    {streamingFighter === 1 && (
                      <span className="streaming-text" />
                    )}
                  </div>
                </Card>
              </div>
            )}

            {currentFighter2Text && (
              <div className="relative">
                <div className="absolute inset-0 bg-red-500/30 blur-xl animate-pulse" />
                <Card className="relative p-4 md:p-6 bg-gradient-to-br from-red-950/40 to-card border-2 border-red-500/60 animate-border-pulse">
                  <div className="flex items-center gap-2 mb-3">
                    <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse" />
                    <h3 className="font-bold text-red-400" style={{fontFamily: 'Orbitron, sans-serif', letterSpacing: '0.05em'}}>
                      {dialectic.fighter2.name.toUpperCase()}
                    </h3>
                    {streamingFighter === 2 && (
                      <span className="text-xs text-red-400 ml-2" style={{fontFamily: '"Press Start 2P", cursive'}}>
                        ‚ö° LIVE
                      </span>
                    )}
                  </div>
                  <div className="philosophical-text whitespace-pre-wrap text-foreground/90 leading-relaxed">
                    {currentFighter2Text}
                    {streamingFighter === 2 && (
                      <span className="streaming-text" />
                    )}
                  </div>
                </Card>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Syntheses */}
      {syntheses.length > 0 && (
        <div className="space-y-8 pt-12 mt-12 border-t-4 border-primary/30">
          {/* Syntheses Header */}
          <div className="text-center space-y-4">
            <div className="inline-block">
              <h2 className="text-2xl md:text-4xl font-bold mb-2 neon-header-pink">
                üíé SYNTHESES UNLOCKED üíé
              </h2>
              <div className="h-1 bg-gradient-to-r from-transparent via-accent to-transparent" />
            </div>
            <p className="text-sm text-muted-foreground">
              {syntheses.length} emergent integration{syntheses.length > 1 ? 's' : ''} discovered
            </p>
          </div>

          <div className="grid gap-8">
            {syntheses.map((synthesis, index) => (
              <div key={index} className="relative group">
                <div className={`absolute inset-0 blur-2xl opacity-0 group-hover:opacity-30 transition-opacity synthesis-glow-${synthesis.type}`} />
                <Card
                  className={`relative p-4 sm:p-6 md:p-8 synthesis-card synthesis-${synthesis.type} transform transition-all duration-300 hover:scale-[1.02]`}
                >
                  <div className="flex flex-col items-start justify-between gap-4 mb-4 sm:mb-6">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 sm:gap-3 mb-3">
                        <span className="text-xl sm:text-2xl">
                          {synthesis.type === 'resolution' && '‚úÖ'}
                          {synthesis.type === 'transcendence' && 'üöÄ'}
                          {synthesis.type === 'paradox' && 'üåÄ'}
                          {synthesis.type === 'subsumption' && 'üîÑ'}
                        </span>
                        <h3 className="text-lg sm:text-xl md:text-2xl font-bold" style={{fontFamily: 'Orbitron, sans-serif'}}>
                          {synthesis.title}
                        </h3>
                      </div>
                      <span 
                        className="inline-block text-xs px-4 py-1.5 rounded-full font-bold uppercase tracking-wider"
                        style={{
                          fontFamily: '"Press Start 2P", cursive',
                          background: synthesis.type === 'resolution' ? 'rgba(0, 255, 0, 0.2)' :
                                     synthesis.type === 'transcendence' ? 'rgba(168, 85, 247, 0.2)' :
                                     synthesis.type === 'paradox' ? 'rgba(255, 0, 255, 0.2)' :
                                     'rgba(255, 255, 0, 0.2)',
                          color: synthesis.type === 'resolution' ? '#00ff00' :
                                synthesis.type === 'transcendence' ? '#a855f7' :
                                synthesis.type === 'paradox' ? '#ff00ff' :
                                '#ffff00',
                          boxShadow: `0 0 20px ${
                            synthesis.type === 'resolution' ? 'rgba(0, 255, 0, 0.3)' :
                            synthesis.type === 'transcendence' ? 'rgba(168, 85, 247, 0.3)' :
                            synthesis.type === 'paradox' ? 'rgba(255, 0, 255, 0.3)' :
                            'rgba(255, 255, 0, 0.3)'
                          }`
                        }}
                      >
                        {synthesis.type}
                      </span>
                    </div>
                  </div>
                  
                  <div className="philosophical-text mb-4 sm:mb-6 whitespace-pre-wrap text-foreground/90 leading-relaxed border-l-2 sm:border-l-4 border-primary/30 pl-3 sm:pl-4 text-sm sm:text-base">
                    {synthesis.content}
                  </div>
                  
                  <div className="flex flex-wrap gap-2 pt-4 border-t border-border/30">
                    {synthesis.concept_tags.map((tag, i) => (
                      <span
                        key={i}
                        className="text-xs px-3 py-1.5 bg-primary/10 text-primary border border-primary/30 rounded hover:bg-primary/20 transition-colors"
                        style={{fontFamily: 'Orbitron, sans-serif'}}
                      >
                        #{tag}
                      </span>
                    ))}
                  </div>
                </Card>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Status */}
      {status === 'complete' && (
        <div className="text-center py-8">
          <div className="inline-flex items-center gap-2 px-4 py-2 bg-green-500/20 text-green-400 rounded-lg">
            <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clipRule="evenodd"
              />
            </svg>
            Dialectic Complete
          </div>
        </div>
      )}

      {status === 'error' && (
        <div className="text-center py-8">
          <div className="max-w-2xl mx-auto space-y-4">
            <div className="flex items-start gap-3 px-6 py-4 bg-red-500/20 text-red-400 rounded-lg border border-red-500/30">
              <svg className="w-6 h-6 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
              <div className="text-left">
                <div className="font-semibold mb-1">Dialectic Generation Failed</div>
                <div className="text-sm">{errorMessage || 'An error occurred. Please try again.'}</div>
              </div>
            </div>
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
            >
              Try Again
            </button>
          </div>
        </div>
      )}

      {/* Scroll anchor */}
      <div ref={bottomRef} />
    </div>
  )
}

